# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sTuFIdwhtxy2HN5hSCiQrdNEpw0PXjwz
"""

# Importing libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Loading the Titanic dataset from a CSV file
titanic_df = pd.read_csv("titanic.csv")

# Displaying the first few rows of the dataset
titanic_df.head()

# Displaying the shape of the dataset (rows, columns)
print("Dataset Shape:", titanic_df.shape)

# Displaying information about the dataset, including data types and non-null counts
titanic_df.info()

# Creating a heatmap to visualize missing values in the dataset
plt.figure(figsize=(12, 6))
sns.heatmap(titanic_df.isnull(), cmap='plasma', cbar=False)
plt.title("Missing Values Heatmap")
plt.show()

# Displaying the number of missing values in each column
missing_values = titanic_df.isnull().sum()
print("Missing Values in Each Column:\n", missing_values)

# Dropping the 'Cabin' column due to a high number of missing values
titanic_df.drop('Cabin', axis=1, inplace=True)

# Displaying the first two rows after dropping 'Cabin'
titanic_df.head(2)

# Displaying the count of unique values in the 'Embarked' column
embarked_counts = titanic_df['Embarked'].value_counts()
print("Embarked Value Counts:\n", embarked_counts)

# Dropping all rows with any remaining missing values
titanic_df.dropna(inplace=True)

# Verifying that there are no more missing values
print("Missing Values After Dropping:\n", titanic_df.isnull().sum())

"""Encoding Categorical Variables"""

# Replacing categorical text data with numerical values for 'Sex' and 'Embarked'
titanic_df.replace({
    'Sex': {'male': 0, 'female': 1},
    'Embarked': {'S': 0, 'C': 1, 'Q': 2}
}, inplace=True)

# Displaying the first few rows after encoding
titanic_df.head()

"""Preparing Features and Target Variables"""

# Selecting feature columns by dropping unnecessary columns
X = titanic_df.drop(['Survived', 'PassengerId', 'Name', 'Ticket'], axis=1)

# Selecting the target variable
y = titanic_df['Survived']

# Displaying the shapes of features and target
print("Features Shape:", X.shape)
print("Target Shape:", y.shape)

"""Splitting the Dataset into Training and Testing Sets"""

# Splitting the data into training and testing sets with 80-20 split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

# Displaying the shape of the training features
print("Training Features Shape:", X_train.shape)

"""Building and Training the Logistic Regression Model"""

# Initializing the Logistic Regression model
lg = LogisticRegression(max_iter=1000)  # Increased max_iter for convergence

# Fitting the model on the training data
lg.fit(X_train, y_train)

"""Making Predictions and Evaluating the Model"""

# Predicting the target for the test set
y_pred = lg.predict(X_test)

# Calculating and printing the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Displaying the predicted values
y_pred

# Creating a sample input for prediction
# The input features are in the order of the X dataframe
# (Pclass, Sex, Age, SibSp, Parch, Fare, Embarked)
input_data = (3, 1, 22.0, 1, 1, 12.2875, 0)

# Converting the input data to a NumPy array
input_np = np.asarray(input_data)

# Reshaping the input to match the model's expected input shape
prediction = lg.predict(input_np.reshape(1, -1))

# Interpreting and printing the prediction result
if prediction[0] == 1:
    print('This person Survived')
else:
    print('This person Did Not Survive')

# Displaying the first few rows of the feature DataFrame
X.head()